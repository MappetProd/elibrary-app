// <auto-generated />
using System;
using EL.Repository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EL.Repository.Migrations
{
    [DbContext(typeof(ElibraryContext))]
    [Migration("20241209071343_Create_Cart_Application_v1")]
    partial class Create_Cart_Application_v1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Applications_PrintedBooks", b =>
                {
                    b.Property<Guid>("printed_book_id")
                        .HasColumnType("binary(16)");

                    b.Property<Guid>("application_id")
                        .HasColumnType("binary(16)");

                    b.HasKey("printed_book_id", "application_id");

                    b.HasIndex("application_id");

                    b.ToTable("Applications_PrintedBooks");
                });

            modelBuilder.Entity("Books_Authors", b =>
                {
                    b.Property<Guid>("author_id")
                        .HasColumnType("binary(16)");

                    b.Property<Guid>("book_id")
                        .HasColumnType("binary(16)");

                    b.HasKey("author_id", "book_id");

                    b.HasIndex("book_id");

                    b.ToTable("Books_Authors");
                });

            modelBuilder.Entity("Books_Genres", b =>
                {
                    b.Property<Guid>("genre_id")
                        .HasColumnType("binary(16)");

                    b.Property<Guid>("book_id")
                        .HasColumnType("binary(16)");

                    b.HasKey("genre_id", "book_id");

                    b.HasIndex("book_id");

                    b.ToTable("Books_Genres");
                });

            modelBuilder.Entity("EL.Domain.Application", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("binary(16)")
                        .HasColumnName("application_id");

                    b.Property<DateTime?>("ActualEndDtm")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("actual_end_dtm");

                    b.Property<int>("ApplicationNumber")
                        .HasColumnType("int")
                        .HasColumnName("application_sequence_number");

                    b.Property<DateTime>("CreationDtm")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("application_creation_dtm");

                    b.Property<DateOnly?>("DeadlineDate")
                        .HasColumnType("date")
                        .HasColumnName("deadline_date");

                    b.Property<Guid>("IssuedById")
                        .HasColumnType("binary(16)");

                    b.Property<Guid>("IssuedByUserId")
                        .HasColumnType("binary(16)")
                        .HasColumnName("issued_by_user_id");

                    b.Property<DateTime?>("ResolveDtm")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("resolve_dtm");

                    b.Property<Guid?>("ResolvedById")
                        .HasColumnType("binary(16)");

                    b.Property<Guid?>("ResolvedByUserId")
                        .HasColumnType("binary(16)")
                        .HasColumnName("resolved_by_user_id");

                    b.HasKey("Id");

                    b.HasIndex("IssuedById");

                    b.HasIndex("ResolvedById");

                    b.ToTable("Application");
                });

            modelBuilder.Entity("EL.Domain.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("binary(16)")
                        .HasColumnName("book_id");

                    b.Property<int>("FirstPublicationYear")
                        .HasColumnType("int")
                        .HasColumnName("first_publication_year");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("book_name");

                    b.HasKey("Id");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("EL.Domain.CartItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("binary(16)")
                        .HasColumnName("cart_item_id");

                    b.Property<DateTime>("AdditionDtm")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("addition_dtm");

                    b.Property<Guid>("PrintedBookId")
                        .HasColumnType("binary(16)")
                        .HasColumnName("printed_book_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("binary(16)")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("PrintedBookId");

                    b.HasIndex("UserId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("EL.Domain.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("binary(16)")
                        .HasColumnName("genre_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("genre_name");

                    b.HasKey("Id");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("EL.Domain.Person", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("binary(16)")
                        .HasColumnName("person_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("person_name");

                    b.Property<string>("Patronymic")
                        .HasColumnType("longtext")
                        .HasColumnName("person_patronymic");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("person_surname");

                    b.HasKey("Id");

                    b.ToTable("Persons", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("EL.Domain.PrintedBook", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("binary(16)")
                        .HasColumnName("printed_book_id");

                    b.Property<int>("AmountLeft")
                        .HasColumnType("int")
                        .HasColumnName("amount_left");

                    b.Property<Guid>("BookId")
                        .HasColumnType("binary(16)")
                        .HasColumnName("book_id");

                    b.Property<string>("ISBN")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("isbn");

                    b.Property<Guid>("PublisherId")
                        .HasColumnType("binary(16)")
                        .HasColumnName("publisher_id");

                    b.Property<int>("PublishingYear")
                        .HasColumnType("int")
                        .HasColumnName("publishing_year");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("PublisherId");

                    b.ToTable("PrintedBooks");
                });

            modelBuilder.Entity("EL.Domain.Publisher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("binary(16)")
                        .HasColumnName("publisher_id");

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("publisher_city_name");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("publisher_name");

                    b.HasKey("Id");

                    b.ToTable("Publishers");
                });

            modelBuilder.Entity("EL.Domain.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("status_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("status_name");

                    b.HasKey("Id");

                    b.ToTable("Statuses");
                });

            modelBuilder.Entity("EL.Domain.Author", b =>
                {
                    b.HasBaseType("EL.Domain.Person");

                    b.ToTable("Authors", null, t =>
                        {
                            t.Property("Id")
                                .HasColumnName("author_id");
                        });
                });

            modelBuilder.Entity("EL.Domain.User", b =>
                {
                    b.HasBaseType("EL.Domain.Person");

                    b.Property<DateOnly>("BirthDate")
                        .HasColumnType("date")
                        .HasColumnName("user_birth_date");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("user_login");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("user_password");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("user_phone_number");

                    b.Property<int>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("user_status_id");

                    b.HasIndex("StatusId");

                    b.ToTable("Users", null, t =>
                        {
                            t.Property("Id")
                                .HasColumnName("user_id");
                        });
                });

            modelBuilder.Entity("Applications_PrintedBooks", b =>
                {
                    b.HasOne("EL.Domain.Application", null)
                        .WithMany()
                        .HasForeignKey("application_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EL.Domain.PrintedBook", null)
                        .WithMany()
                        .HasForeignKey("printed_book_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Books_Authors", b =>
                {
                    b.HasOne("EL.Domain.Author", null)
                        .WithMany()
                        .HasForeignKey("author_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EL.Domain.Book", null)
                        .WithMany()
                        .HasForeignKey("book_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Books_Genres", b =>
                {
                    b.HasOne("EL.Domain.Book", null)
                        .WithMany()
                        .HasForeignKey("book_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EL.Domain.Genre", null)
                        .WithMany()
                        .HasForeignKey("genre_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EL.Domain.Application", b =>
                {
                    b.HasOne("EL.Domain.User", "IssuedBy")
                        .WithMany()
                        .HasForeignKey("IssuedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EL.Domain.User", "ResolvedBy")
                        .WithMany()
                        .HasForeignKey("ResolvedById");

                    b.Navigation("IssuedBy");

                    b.Navigation("ResolvedBy");
                });

            modelBuilder.Entity("EL.Domain.CartItem", b =>
                {
                    b.HasOne("EL.Domain.PrintedBook", "PrintedBook")
                        .WithMany()
                        .HasForeignKey("PrintedBookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EL.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PrintedBook");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EL.Domain.PrintedBook", b =>
                {
                    b.HasOne("EL.Domain.Book", "Book")
                        .WithMany("PrintedBooks")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EL.Domain.Publisher", "Publisher")
                        .WithMany("PrintedBooks")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("EL.Domain.Author", b =>
                {
                    b.HasOne("EL.Domain.Person", null)
                        .WithOne()
                        .HasForeignKey("EL.Domain.Author", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EL.Domain.User", b =>
                {
                    b.HasOne("EL.Domain.Person", null)
                        .WithOne()
                        .HasForeignKey("EL.Domain.User", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EL.Domain.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Status");
                });

            modelBuilder.Entity("EL.Domain.Book", b =>
                {
                    b.Navigation("PrintedBooks");
                });

            modelBuilder.Entity("EL.Domain.Publisher", b =>
                {
                    b.Navigation("PrintedBooks");
                });
#pragma warning restore 612, 618
        }
    }
}
